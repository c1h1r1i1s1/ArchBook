- name: Ensure Pictures and Wallpapers dirs
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ primary_user }}"
    group: "{{ primary_user }}"
    mode: '0755'
  loop:
    - "/home/{{ primary_user }}/Pictures"
    - "{{ wallpapers_dir }}"

- name: Copy Wallpapers folder contents
  copy:
    src: "Wallpapers/"
    dest: "{{ wallpapers_dir }}/"
    owner: "{{ primary_user }}"
    group: "{{ primary_user }}"
    mode: '0644'
  notify: Fix permissions

- name: Install change_wallpapers.sh (yours)
  copy:
    src: "change_wallpapers.sh"
    dest: "{{ wallpapers_dir }}/change_wallpapers.sh"
    owner: "{{ primary_user }}"
    group: "{{ primary_user }}"
    mode: '0755'

# OPTIONAL: safety symlink for your 21:00 job name
- name: Ensure change_swallpapers.sh symlink exists
  file:
    src: "{{ wallpapers_dir }}/change_wallpapers.sh"
    dest: "{{ wallpapers_dir }}/change_swallpapers.sh"
    state: link
    owner: "{{ primary_user }}"
    group: "{{ primary_user }}"

# Patch your script to auto-detect the Firefox profile (replaces the hard-coded line)
- name: Make Firefox profile handling robust
  become: false
  become_user: "{{ primary_user }}"
  lineinfile:
    path: "{{ wallpapers_dir }}/change_wallpapers.sh"
    regexp: '^cp\s+~/.cache/wal/firefox_content\.css\s+~/.mozilla/firefox/.+?/chrome/userContent\.css$'
    line: |
      profile_dir="$(find "$HOME/.mozilla/firefox" -maxdepth 1 -type d -name "*.default*" -o -name "*.default-esr*" | head -n1)"
      if [ -n "$profile_dir" ]; then
        mkdir -p "$profile_dir/chrome"
        cp ~/.cache/wal/firefox_content.css "$profile_dir/chrome/userContent.css"
      fi

- name: Ensure rsync is installed
  community.general.pacman:
    name: rsync
    state: present
    update_cache: yes

- name: Ensure system-wide theme/icon dirs exist
  become: true
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - /usr/share/themes
    - /usr/share/icons

- name: Stage themes/icons archive (if present)
  copy:
    src: "themes_icons.tar.zst"
    dest: "/tmp/themes_icons.tar.zst"
    mode: '0644'
  register: _archive

- name: Extract themes/icons archive (first run bootstrap)
  become: true
  when: _archive is defined and _archive is succeeded
  unarchive:
    src: "/tmp/themes_icons.tar.zst"
    dest: "/usr/share"
    remote_src: true
    creates: "/usr/share/themes/oomox-day"

- name: Sync Cinnamon themes (progress)
  become: true
  synchronize:
    src: "{{ role_path }}/files/themes/"
    dest: "/usr/share/themes/"
    archive: true
    delete: false
    rsync_opts:
      - "--info=progress2"
      - "--exclude=.git"

- name: Sync icon themes (progress)
  become: true
  synchronize:
    src: "{{ role_path }}/files/icons/"
    dest: "/usr/share/icons/"
    archive: true
    delete: false
    rsync_opts:
      - "--info=progress2"
      - "--exclude=.git"

# Cron jobs with DISPLAY + DBUS so gsettings works
- name: Cron 06:00
  cron:
    name: "Change wallpapers at 06:00"
    user: "{{ primary_user }}"
    minute: "0"
    hour: "6"
    job: 'DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus {{ wallpapers_dir }}/change_wallpapers.sh'

- name: Cron 17:00
  cron:
    name: "Change wallpapers at 17:00"
    user: "{{ primary_user }}"
    minute: "0"
    hour: "17"
    job: 'DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus {{ wallpapers_dir }}/change_wallpapers.sh'

- name: Cron 21:00 (swallpapers)
  cron:
    name: "Change swallpapers at 21:00"
    user: "{{ primary_user }}"
    minute: "0"
    hour: "21"
    job: 'DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus {{ wallpapers_dir }}/change_swallpapers.sh'

- name: Ensure {{ primary_user }} owns pictures subtree
  file:
    path: "/home/{{ primary_user }}/Pictures"
    owner: "{{ primary_user }}"
    group: "{{ primary_user }}"
    recurse: yes